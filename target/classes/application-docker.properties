# Docker/Container Environment Configuration

# Server configuration
server.port=8080
server.servlet.context-path=/

# Database configuration (PostgreSQL) - using environment variables
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://postgres:5432/cheko}
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Connection pool settings for production
spring.datasource.hikari.maximum-pool-size=${DATABASE_MAX_POOL_SIZE:20}
spring.datasource.hikari.minimum-idle=${DATABASE_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# JPA/Hibernate configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Flyway configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.repair=${FLYWAY_REPAIR:false}

# Logging configuration
logging.level.com.cheko.backend=${LOG_LEVEL:INFO}
logging.level.org.springframework.web=${WEB_LOG_LEVEL:INFO}
logging.level.org.hibernate.SQL=${SQL_LOG_LEVEL:WARN}
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Swagger/OpenAPI Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true

# Tomcat Configuration for production
server.tomcat.max-http-header-size=1048576
server.tomcat.max-http-post-size=10485760
server.max-http-header-size=1048576
server.tomcat.threads.max=${TOMCAT_MAX_THREADS:200}
server.tomcat.threads.min-spare=${TOMCAT_MIN_THREADS:10}

# Actuator endpoints for monitoring
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.info.env.enabled=true

# Security headers
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
